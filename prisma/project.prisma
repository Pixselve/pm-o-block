datasource db {
    provider = "sqlite"
    url      = "file:dev.db"
    default  = true
}

generator photon {
    provider = "photonjs"
    output   = "node_modules/@generated/photon"
}
model Guild {
    id    String  @default(cuid()) @id @unique
    discordId String @unique
    createdAt DateTime
    users GuildUser[]
    badWords BadWord[]
    verificationRequired Boolean? @default(true)
    baseRoleAfterVerificationId String?
    backup GuildBackup[]
    nsfwConfig NSFWVerification
}
model User {
    id    String  @default(cuid()) @id @unique
    discordId String @unique
    guildUsers GuildUser[]
}
model Warn {
    id    String  @default(cuid()) @id @unique
    reason String
    timestamp DateTime   @default(now())
    authorId String @unique
    target GuildUser
}
model BadWord {
    id    String  @default(cuid()) @id @unique
    value String @unique
    guild Guild
}
model GuildUser {
    id    String  @default(cuid()) @id @unique
    user User
    guild Guild
    verified Boolean @default(false)
    messages Int @default(0)
    captchaText String?
    warns Warn[]
    opinion String?
}
model GuildBackup {
    id    String  @default(uuid()) @id @unique
    guild Guild
    roles Role[]
    channels Channel[]
}
model Role {
    id    String  @default(cuid()) @id @unique
    guildBackup GuildBackup
    name String
    color Int
    permissions Int
    mentionable Boolean
    position Int
    hoist Boolean
}
model Channel {
    id    String  @default(cuid()) @id @unique
    guildBackup GuildBackup
    name String
    channelId String
    parent String?
    type String
    position Int
    permissions PermissionOverwrites[]
}
model PermissionOverwrites {
    id    String  @default(cuid()) @id @unique
    allow Int
    deny Int
    type String
    channel Channel
}
model NSFWVerification {
    id    String  @default(cuid()) @id @unique
    guild Guild
    activated Boolean @default(true)
    possibilityRemoveDirectly Float @default(0.60)
    possibilityRemoveWithVote Float @default(0.50)
}